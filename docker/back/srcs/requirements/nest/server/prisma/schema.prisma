// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id // User's id, ie 42 login
  name     String  @unique // Display name, default to id
  password String? // For 'classic' login
  avatar   String // URL to avatar
  tfa      String? // Google Authenticator's Token
  theme    String // Game theme

  // Friend list
  friends      User[]        @relation("friends")
  friendOf     User[]        @relation("friends")
  // Hate list
  blocked      User[]        @relation("blocked")
  blockedBy    User[]        @relation("blocked")
  // Game fields
  gamesWon     Game[]        @relation("gameWinner")
  gamesLost    Game[]        @relation("gameLoser")
  achievements Achievement[]
  // Chat fields
  channels     PMMember[]
  bannedChans  PMBanned[]
  pmMessages   PMMessage[]
  dmMessages   DMMessage[]
}

model Game {
  id          Int      @id @default(autoincrement())
  time        DateTime
  winnerId    String
  loserId     String
  winnerScore Int
  loserScore  Int
  winner      User     @relation("gameWinner", fields: [winnerId], references: [id])
  loser       User     @relation("gameLoser", fields: [loserId], references: [id])
}

model Achievement {
  id    Int    @id @default(autoincrement())
  name  String
  desc  String @unique
  img   String // URL to achievement's image
  users User[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  MUTED
}

model PMMember {
  id      Int       @id @default(autoincrement())
  userId  String
  chanId  Int
  time    DateTime? // for muted members
  role    Role      @default(MEMBER)
  user    User      @relation(fields: [userId], references: [id])
  channel PMChannel @relation(fields: [chanId], references: [id])
}

model PMBanned {
  id      Int       @id @default(autoincrement())
  userId  String
  chanId  Int
  time    DateTime?
  user    User      @relation(fields: [userId], references: [id])
  channel PMChannel @relation(fields: [chanId], references: [id])
}

model PMChannel {
  id       Int         @id @default(autoincrement())
  name     String      @default("Public Channel")
  avatar   String // URL to channel's avatar
  visible  Boolean     @default(true)
  password String?
  members  PMMember[]
  banned   PMBanned[]
  messages PMMessage[]
}

model PMMessage {
  id       Int       @id @default(autoincrement())
  chanId   Int
  time     DateTime
  senderId String
  content  String
  channel  PMChannel @relation(fields: [chanId], references: [id])
  sender   User      @relation(fields: [senderId], references: [id])
}

model DMChannel {
  id       Int         @id @default(autoincrement())
  userId1  String
  userId2  String
  messages DMMessage[]
}

model DMMessage {
  id       Int       @id @default(autoincrement())
  chanId   Int
  time     DateTime
  senderId String
  content  String
  channel  DMChannel @relation(fields: [chanId], references: [id])
  sender   User      @relation(fields: [senderId], references: [id])
}
